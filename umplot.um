const (
    STYLE_LINE* = 1
    STYLE_SCATTER*
)

type (
    Point* = struct {
        x, y: real
    }

    Style* = struct {
        kind: int
        color: uint32
        width: real     
    }

    Series* = struct {
        points: []Point
        actLen: int
        name: str
        style: Style
    }

    Grid* = struct {
        xNumLines, yNumLines: int 
        color: uint32
        fontSize: int
        visible, labelled: bool
    }

    Titles* = struct {
        x, y, graph: str
        color: uint32
        fontSize: int
        visible: bool
    }

    Legend* = struct {
        visible: bool
    }    

    Plot* = struct {
        series: []Series
        grid: Grid
        titles: Titles
        legend: Legend
    }
)

fn (s: ^Series) clear*() {
    s.points = make([]Point, 256)
    s.actLen = 0
}

fn (s: ^Series) trim() {
    if s.actLen < len(s.points) {
        s.points = slice(s.points, 0, s.actLen)
    }
}

fn (s: ^Series) add*(x, y: real) {
    if len(s.points) == 0 {
        s.clear()
    }
    if s.actLen >= len(s.points) {    
        s.points = append(s.points, make([]Point, len(s.points)))
    }
    s.points[s.actLen] = Point{x, y}
    s.actLen++
}

fn init*(numSeries: int = 1, kind: int = STYLE_LINE): Plot {
    plt := Plot{series: make([]Series, numSeries)}

    const getDefaultColors = fn (numColors: int): []uint32 {
        basicColors := []uint32{0xFF0000DD, 0xFFDD0000, 0xFF00DD00}
        colors := make([]uint32, numColors)

        for i := 0; i < numColors; i++ {
            if i < len(basicColors) {
                colors[i] = basicColors[i]
            } else {
                j := i - len(basicColors)
                colors[i] = (colors[j] + colors[j + 1]) / 2
            }
        }

        return colors       
    }

    defaultColors := getDefaultColors(numSeries)

    for i := 0; i < numSeries; i++ {
        plt.series[i].name = ""
        plt.series[i].style = Style{kind: kind, color: defaultColors[i], width: 3.0}
    }

    plt.grid = Grid{xNumLines: 5, yNumLines: 5, color: 0xFF505050, fontSize: 12, visible: true, labelled: true}
    plt.titles = Titles{x: "", y: "", graph: "", color: plt.grid.color, fontSize: plt.grid.fontSize, visible: true}
    plt.legend = Legend{visible: true}

    return plt
}

fn umplot_plot(p: ^Plot): int

fn (p: ^Plot) plot*() {
    for i := 0; i < len(p.series); i++ {
        p.series[i].trim()      
    }

    umplot_plot(p)
}


